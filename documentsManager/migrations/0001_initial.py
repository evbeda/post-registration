# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-11-06 14:37
from __future__ import unicode_literals

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import documentsManager.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('username', models.TextField(default=models.EmailField(max_length=254, unique=True, verbose_name='email address'))),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', documentsManager.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Evaluator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254, unique=True)),
            ],
            options={
                'db_table': 'Evaluator',
            },
        ),
        migrations.CreateModel(
            name='EvaluatorEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('invitation_code', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('evaluator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='documentsManager.Evaluator')),
            ],
            options={
                'db_table': 'EvaluatorEvent',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eb_event_id', models.TextField(unique=True)),
                ('init_submission', models.DateField(default=datetime.date.today)),
                ('end_submission', models.DateField(null=True)),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Event',
            },
        ),
        migrations.CreateModel(
            name='FileDoc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('quantity', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MaxValueValidator(99)])),
                ('is_optional', models.BooleanField(default=False)),
                ('event', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='documentsManager.Event')),
            ],
            options={
                'db_table': 'FileDoc',
            },
        ),
        migrations.CreateModel(
            name='FileType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('description', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'db_table': 'FileType',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('aproved', models.BooleanField(unique=True)),
                ('evaluator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='documentsManager.Evaluator')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='documentsManager.Event')),
            ],
            options={
                'db_table': 'Review',
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('evaluated', 'Evaluated')], default='pending', max_length=20)),
                ('date', models.DateField(default=datetime.date.today)),
                ('eb_user_id', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'Submission',
            },
        ),
        migrations.CreateModel(
            name='TextDoc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=150)),
                ('is_optional', models.BooleanField(default=False)),
                ('measure', models.CharField(choices=[('Words', 'Words'), ('Characters', 'Characters')], default='Words', max_length=10)),
                ('max', models.PositiveSmallIntegerField(default=500)),
                ('min', models.PositiveSmallIntegerField(default=10)),
                ('event', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='documentsManager.Event')),
            ],
            options={
                'db_table': 'TextDoc',
            },
        ),
        migrations.CreateModel(
            name='UserWebhook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('webhook_id', models.CharField(max_length=255)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FileSubmission',
            fields=[
                ('submission_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='documentsManager.Submission')),
                ('file', models.FileField(upload_to='')),
            ],
            options={
                'db_table': 'FileSubmission',
            },
            bases=('documentsManager.submission',),
        ),
        migrations.CreateModel(
            name='TextSubmission',
            fields=[
                ('submission_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='documentsManager.Submission')),
                ('content', models.TextField()),
                ('text_doc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='documentsManager.TextDoc')),
            ],
            options={
                'db_table': 'TextSubmission',
            },
            bases=('documentsManager.submission',),
        ),
        migrations.AddField(
            model_name='filedoc',
            name='file_type',
            field=models.ManyToManyField(to='documentsManager.FileType'),
        ),
        migrations.AddField(
            model_name='evaluatorevent',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='documentsManager.Event'),
        ),
        migrations.AddField(
            model_name='evaluator',
            name='event',
            field=models.ManyToManyField(through='documentsManager.EvaluatorEvent', to='documentsManager.Event'),
        ),
        migrations.AddField(
            model_name='filesubmission',
            name='file_doc',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='documentsManager.FileDoc'),
        ),
    ]
